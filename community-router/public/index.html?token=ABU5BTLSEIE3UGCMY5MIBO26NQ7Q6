<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=, initial-scale=1.0" />
    <title>Document</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.5.39/Tone.js"></script>
    <style>
      .body {
        font-family: monospace;
      }
      .container {
        width: 800px;
        margin: auto;
      }
      .packet {
        height: 50px;
      }
    </style>
  </head>
  <body>
    <script>
      var synth = new Tone.Synth().toMaster();

      let PANVAR = 0; // sets pan range

      // reads local text file
      function readTextFile(file) {
        var rawFile = new XMLHttpRequest();
        rawFile.open("GET", file, false);
        rawFile.onreadystatechange = function() {
          if (rawFile.readyState === 4) {
            if (rawFile.status === 200 || rawFile.status == 0) {
              var allText = rawFile.responseText;

              // splits text file into lines
              var lines = allText.split("\n");

              // creates array to store synths
              let synths = [];

              // iterates through each line of the file with delay
              for (var line = 0; line < lines.length; line++) {
                (line => {
                  setTimeout(() => {
                    // creates synth
                    let panner = new Tone.Panner(PANVAR).toDestination();
                    let synth = new Tone.Synth().connect(panner);
                    // synth.triggerAttackRelease();
                    //synth.triggerAttack();
                    console.log(line);

                    // every nth packet dispose of synth the oldest synth
                    if (line % 8 == 0) {
                      let toKill = synths.shift();
                      toKill.disconnect();
                      toKill.dispose();
                      //synth.sync();
                      //                     Tone.context.close();
                      //                     Tone.context = new AudioContext()
                      console.log("dis");
                    }

                    // analyzes packet for port number sets synth note and pushes it to synths array
                    if (lines[line].includes("443")) {
                      //play a middle 'C' for the duration of an 8th note
                      // panner.pan(-1); // synth.disconnect();
                      PANVAR = -1;
                      synth.disconnect();
                      synth.connect(panner);
                      //synth.setNote("C2");
                      synth.triggerAttackRelease("C2", "8n");
                      synths.push(synth);
                      $("div.packet").replaceWith(
                        `<div class='packet' style='color:green'>${lines[line]}</div>`
                      );
                    } else if (lines[line].includes("80")) {
                      // panner.pan(1);
                      PANVAR = 1;
                      synth.disconnect();
                      synth.connect(panner);
                      //synth.setNote("C4");
                      synth.triggerAttackRelease("C4", "8n");
                      synths.push(synth);
                      $("div.packet").replaceWith(
                        `<div class='packet' style='color:red'>${lines[line]}</div>`
                      );
                    } else {
                      // panner.pan(0);
                      PANVAR = 0;
                      synth.disconnect();
                      synth.connect(panner);
                      //synth.setNote("C3");
                      synth.triggerAttackRelease("c3", "8n");
                      synths.push(synth);
                      $("div.packet").replaceWith(
                        `<div class='packet' style='color:black'>${lines[line]}</div>`
                      );
                    }
                  }, 100 * line);
                })(line);
              }
            }
          }
        };
        rawFile.send(null);
      }

      readTextFile("./capture.txt");
    </script>
    <div class="container">
      <div><h1>Network Listener</h1></div>
      <div>
        <p><em>* Listen with headphones</em></p>
      </div>
      <div class="packet"></div>
      <div class="writeup">
        <h2>Writeup</h2>
        <ul>
          <li>
            <a href="https://github.com/emceelamb/listen-router"
              >Code repository</a
            >
          </li>
        </ul>
        <p>
          This project is a data driven two-channel audio experiment to sonify
          network traffic on the router. It runs on nodejs or Flask.py. The
          sounds are generated with [tonejs](https://github.com/Tonejs/Tone.js),
          with data captured with
          [tshark](https://www.wireshark.org/docs/man-pages/tshark.html).
        </p>
        <p>
          I built a backend with Flask-SocketIO, and hosted it with a raspberry
          pi router with intending to create a locally hosted web page that
          people on the network could listen to the traffic being passed through
          the router. I had problems passing the real-time data to the client so
          for prototyping I decided to use pre-captured data.
        </p>
        <p>
          When coding the project, I used Tshark to capture network traffic on
          my laptop's wireless interface and wrote it to a text file for about
          10 minutes, with 4013 packets captured. Using a node server for the
          projects I serve the text file to the client and process it on their
          computer.
        </p>
        <p>
          The text file is read line by line and with ToneJS a synth is created
          for each packet if the packet is sent to or from an encrypted port
          (443) a C2 note is played on the left channel. If a packet is sent in
          the clear (port 80) a C3 note is played on the right channel. All
          other packets trigger an E2 note played on both channels. I use the
          synths trigger attack release method to overlay the notes and create a
          richer sound. The packet being analyzed is displayed on screen and
          colorized as well.
        </p>
        <p>
          Around 400 packets the audio quality drastically drops. I am guessing
          it has to do with having a maxed out audio buffer, but I could not
          resolve it. I tried a couple things such as keeping track of the
          synths and every 10 lines shifting the array and disposing the synth,
          and while it sounds cleaner it doesn't solve the problem around 400
          packets. I attempted to close the audio context and open a new
          context,
          [per](https://groups.google.com/forum/#!topic/tonejs/7fuL_8_SlIo), but
          that crashes the program.
        </p>
        <p>
          I plan on keep working on this to fix the audio buffer issues and
          discover the best way to stream live data as well.
        </p>
      </div>
    </div>
  </body>
</html>
